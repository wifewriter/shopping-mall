<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


    <!-- 配置C3P0数据源组件 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl" value="${db.url}"></property>
        <property name="driverClass" value="${db.driver}"></property>
        <property name="user" value="${db.username}"></property>
        <property name="password" value="${db.password}"></property>
        <!--<property name="password" value="${db.password}"></property>-->
        <property name="maxPoolSize" value="40"></property>
        <property name="minPoolSize" value="5"></property>
        <property name="initialPoolSize" value="5"></property>
        <property name="maxIdleTime" value="20"></property>
    </bean>

    <!-- 配置SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 集中映射所有Mapper文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>
        <!-- 别名设置，默认SqlSessionFactoryBean不支持别设置通配符*， -->
        <property name="typeAliasesPackage" value="com.qf1801.group4.shop.entity"/>
        <!-- 引入mybatis.xml -->
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        <!-- 注意其他配置 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            <!--dialect=mysql-->
                            rowBoundsWithCount=false
                            pageSizeZero=true
                            reasonable=false
                            supportMethodsArguments=false
                            returnPageInfo=none
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 扫瞄Mapper -->
    <bean id="mapperScannerConfigurer" class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- basePackage也支持通配符*的方式 -->
        <property name="basePackage" value="com.qf1801.group4.shop.dao"/>
    </bean>

    <!--
        配置事务管理器
        DataSourceTransactionManager ： 基于JDBC的事务管理器
        HibernateTransactionManager：基于Hibernate的事务管理器，也可以操作JDBC的事务
        JtaTransactionManager：多数据库间的事务解决方案
    -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        1、允许使用@Transactional注解标记事务
        2、注：tx需要配置xml的xmlns和xsi:schemaLocation！
        <tx:annotation-driven transaction-manager="txManager" />
    -->

    <!-- AOP配置事务：XML配置事务可添加在哪些方法 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!-- 事务做在哪一些 -->
        <aop:pointcut id="serviceLayer" expression="execution(* com.qf1801.group4.shop.service.*.*(..))"/>
        <!-- 使用<aop:advisor>结合tx:advice和aop:pointcut决定事务的处理 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceLayer"/>
    </aop:config>

</beans>